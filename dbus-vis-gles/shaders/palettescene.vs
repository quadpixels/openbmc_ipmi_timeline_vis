#version 100

in vec2  aPos;
in float colorIdx;

out vec4 vertexColor;

vec3 default_palette[256] = vec3[](
    vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0),vec3(0.8,1.0,1.0),vec3(0.6,1.0,1.0),vec3(0.4,1.0,1.0),vec3(0.2,1.0,1.0),vec3(0.0,1.0,1.0),vec3(1.0,0.8,1.0),
    vec3(0.8,0.8,1.0),vec3(0.6,0.8,1.0),vec3(0.4,0.8,1.0),vec3(0.2,0.8,1.0),vec3(0.0,0.8,1.0),vec3(1.0,0.6,1.0),vec3(0.8,0.6,1.0),vec3(0.6,0.6,1.0),
    vec3(0.4,0.6,1.0),vec3(0.2,0.6,1.0),vec3(0.0,0.6,1.0),vec3(1.0,0.4,1.0),vec3(0.8,0.4,1.0),vec3(0.6,0.4,1.0),vec3(0.4,0.4,1.0),vec3(0.2,0.4,1.0),
    vec3(0.0,0.4,1.0),vec3(1.0,0.2,1.0),vec3(0.8,0.2,1.0),vec3(0.6,0.2,1.0),vec3(0.4,0.2,1.0),vec3(0.2,0.2,1.0),vec3(0.0,0.2,1.0),vec3(1.0,0.0,1.0),
    vec3(0.8,0.0,1.0),vec3(0.6,0.0,1.0),vec3(0.4,0.0,1.0),vec3(0.2,0.0,1.0),vec3(0.0,0.0,1.0),vec3(1.0,1.0,0.8),vec3(0.8,1.0,0.8),vec3(0.6,1.0,0.8),
    vec3(0.4,1.0,0.8),vec3(0.2,1.0,0.8),vec3(0.0,1.0,0.8),vec3(1.0,0.8,0.8),vec3(0.8,0.8,0.8),vec3(0.6,0.8,0.8),vec3(0.4,0.8,0.8),vec3(0.2,0.8,0.8),
    vec3(0.0,0.8,0.8),vec3(1.0,0.6,0.8),vec3(0.8,0.6,0.8),vec3(0.6,0.6,0.8),vec3(0.4,0.6,0.8),vec3(0.2,0.6,0.8),vec3(0.0,0.6,0.8),vec3(1.0,0.4,0.8),
    vec3(0.8,0.4,0.8),vec3(0.6,0.4,0.8),vec3(0.4,0.4,0.8),vec3(0.2,0.4,0.8),vec3(0.0,0.4,0.8),vec3(1.0,0.2,0.8),vec3(0.8,0.2,0.8),vec3(0.6,0.2,0.8),
    vec3(0.4,0.2,0.8),vec3(0.2,0.2,0.8),vec3(0.0,0.2,0.8),vec3(1.0,0.0,0.8),vec3(0.8,0.0,0.8),vec3(0.6,0.0,0.8),vec3(0.4,0.0,0.8),vec3(0.2,0.0,0.8),
    vec3(0.0,0.0,0.8),vec3(1.0,1.0,0.6),vec3(0.8,1.0,0.6),vec3(0.6,1.0,0.6),vec3(0.4,1.0,0.6),vec3(0.2,1.0,0.6),vec3(0.0,1.0,0.6),vec3(1.0,0.8,0.6),
    vec3(0.8,0.8,0.6),vec3(0.6,0.8,0.6),vec3(0.4,0.8,0.6),vec3(0.2,0.8,0.6),vec3(0.0,0.8,0.6),vec3(1.0,0.6,0.6),vec3(0.8,0.6,0.6),vec3(0.6,0.6,0.6),
    vec3(0.4,0.6,0.6),vec3(0.2,0.6,0.6),vec3(0.0,0.6,0.6),vec3(1.0,0.4,0.6),vec3(0.8,0.4,0.6),vec3(0.6,0.4,0.6),vec3(0.4,0.4,0.6),vec3(0.2,0.4,0.6),
    vec3(0.0,0.4,0.6),vec3(1.0,0.2,0.6),vec3(0.8,0.2,0.6),vec3(0.6,0.2,0.6),vec3(0.4,0.2,0.6),vec3(0.2,0.2,0.6),vec3(0.0,0.2,0.6),vec3(1.0,0.0,0.6),
    vec3(0.8,0.0,0.6),vec3(0.6,0.0,0.6),vec3(0.4,0.0,0.6),vec3(0.2,0.0,0.6),vec3(0.0,0.0,0.6),vec3(1.0,1.0,0.4),vec3(0.8,1.0,0.4),vec3(0.6,1.0,0.4),
    vec3(0.4,1.0,0.4),vec3(0.2,1.0,0.4),vec3(0.0,1.0,0.4),vec3(1.0,0.8,0.4),vec3(0.8,0.8,0.4),vec3(0.6,0.8,0.4),vec3(0.4,0.8,0.4),vec3(0.2,0.8,0.4),
    vec3(0.0,0.8,0.4),vec3(1.0,0.6,0.4),vec3(0.8,0.6,0.4),vec3(0.6,0.6,0.4),vec3(0.4,0.6,0.4),vec3(0.2,0.6,0.4),vec3(0.0,0.6,0.4),vec3(1.0,0.4,0.4),
    vec3(0.8,0.4,0.4),vec3(0.6,0.4,0.4),vec3(0.4,0.4,0.4),vec3(0.2,0.4,0.4),vec3(0.0,0.4,0.4),vec3(1.0,0.2,0.4),vec3(0.8,0.2,0.4),vec3(0.6,0.2,0.4),
    vec3(0.4,0.2,0.4),vec3(0.2,0.2,0.4),vec3(0.0,0.2,0.4),vec3(1.0,0.0,0.4),vec3(0.8,0.0,0.4),vec3(0.6,0.0,0.4),vec3(0.4,0.0,0.4),vec3(0.2,0.0,0.4),
    vec3(0.0,0.0,0.4),vec3(1.0,1.0,0.2),vec3(0.8,1.0,0.2),vec3(0.6,1.0,0.2),vec3(0.4,1.0,0.2),vec3(0.2,1.0,0.2),vec3(0.0,1.0,0.2),vec3(1.0,0.8,0.2),
    vec3(0.8,0.8,0.2),vec3(0.6,0.8,0.2),vec3(0.4,0.8,0.2),vec3(0.2,0.8,0.2),vec3(0.0,0.8,0.2),vec3(1.0,0.6,0.2),vec3(0.8,0.6,0.2),vec3(0.6,0.6,0.2),
    vec3(0.4,0.6,0.2),vec3(0.2,0.6,0.2),vec3(0.0,0.6,0.2),vec3(1.0,0.4,0.2),vec3(0.8,0.4,0.2),vec3(0.6,0.4,0.2),vec3(0.4,0.4,0.2),vec3(0.2,0.4,0.2),
    vec3(0.0,0.4,0.2),vec3(1.0,0.2,0.2),vec3(0.8,0.2,0.2),vec3(0.6,0.2,0.2),vec3(0.4,0.2,0.2),vec3(0.2,0.2,0.2),vec3(0.0,0.2,0.2),vec3(1.0,0.0,0.2),
    vec3(0.8,0.0,0.2),vec3(0.6,0.0,0.2),vec3(0.4,0.0,0.2),vec3(0.2,0.0,0.2),vec3(0.0,0.0,0.2),vec3(1.0,1.0,0.0),vec3(0.8,1.0,0.0),vec3(0.6,1.0,0.0),
    vec3(0.4,1.0,0.0),vec3(0.2,1.0,0.0),vec3(0.0,1.0,0.0),vec3(1.0,0.8,0.0),vec3(0.8,0.8,0.0),vec3(0.6,0.8,0.0),vec3(0.4,0.8,0.0),vec3(0.2,0.8,0.0),
    vec3(0.0,0.8,0.0),vec3(1.0,0.6,0.0),vec3(0.8,0.6,0.0),vec3(0.6,0.6,0.0),vec3(0.4,0.6,0.0),vec3(0.2,0.6,0.0),vec3(0.0,0.6,0.0),vec3(1.0,0.4,0.0),
    vec3(0.8,0.4,0.0),vec3(0.6,0.4,0.0),vec3(0.4,0.4,0.0),vec3(0.2,0.4,0.0),vec3(0.0,0.4,0.0),vec3(1.0,0.2,0.0),vec3(0.8,0.2,0.0),vec3(0.6,0.2,0.0),
    vec3(0.4,0.2,0.0),vec3(0.2,0.2,0.0),vec3(0.0,0.2,0.0),vec3(1.0,0.0,0.0),vec3(0.8,0.0,0.0),vec3(0.6,0.0,0.0),vec3(0.4,0.0,0.0),vec3(0.2,0.0,0.0),
    vec3(0.0,0.0,0.9),vec3(0.0,0.0,0.9),vec3(0.0,0.0,0.7),vec3(0.0,0.0,0.7),vec3(0.0,0.0,0.5),vec3(0.0,0.0,0.5),vec3(0.0,0.0,0.3),vec3(0.0,0.0,0.3),
    vec3(0.0,0.0,0.1),vec3(0.0,0.0,0.1),vec3(0.0,0.9,0.0),vec3(0.0,0.9,0.0),vec3(0.0,0.7,0.0),vec3(0.0,0.7,0.0),vec3(0.0,0.5,0.0),vec3(0.0,0.5,0.0),
    vec3(0.0,0.3,0.0),vec3(0.0,0.3,0.0),vec3(0.0,0.1,0.0),vec3(0.0,0.1,0.0),vec3(0.9,0.0,0.0),vec3(0.9,0.0,0.0),vec3(0.7,0.0,0.0),vec3(0.7,0.0,0.0),
    vec3(0.5,0.0,0.0),vec3(0.5,0.0,0.0),vec3(0.3,0.0,0.0),vec3(0.3,0.0,0.0),vec3(0.1,0.0,0.0),vec3(0.1,0.0,0.0),vec3(0.9,0.9,0.9),vec3(0.9,0.9,0.9),
    vec3(0.7,0.7,0.7),vec3(0.7,0.7,0.7),vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(0.3,0.3,0.3),vec3(0.3,0.3,0.3),vec3(0.1,0.1,0.1),vec3(0.1,0.1,0.1)
);

void main() {
    gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0);
    vertexColor = vec4(default_palette[int(colorIdx)], 1);
}